{% extends '::base.html.twig' %}
{% block stylesheets %}
  <style type="text/css" media="screen">

html
{
    height: 100%;
    width: 100%;
    overflow: hidden;
}

body
{
    overflow: hidden;
    margin: 0;
    padding: 0;
    height: 100%;
    width: 100%;
	box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;
}
    
#editor
{ 
	position: absolute;
	top:  50px;
/*	left: 280px;*/
	bottom:10px;
/*	height:1000px;*/
	background: white;
	padding: 0px;
}
#selection
{
		width: 250px;
/*		height: 200px;*/
}
#container
{
		margin-top: 10px;		
}
#container_left
{
/*		float:left;
		margin-right: 10px;
*/}
#container_right
{
}
#compile_output
{
	position: absolute;
	bottom: 0px;
	height:0px;
	padding: 0px;
	overflow-y: scroll;
	background: white;
	/*	width: 280px;*/
	white-space: -moz-pre-wrap !important;  /* Mozilla, since 1999 */
	white-space: -pre-wrap;      /* Opera 4-6 */
	white-space: -o-pre-wrap;    /* Opera 7 */
	white-space: pre-wrap;       /* css-3 */
	word-wrap: break-word;       /* Internet Explorer 5.5+ */
}
.mybutton
{
	width:100%;
	margin-bottom:10px;
}
.download_link
{
	margin-left:14px;
}

.navbar-fixed-bottom {
  position: fixed;
  bottom: 0;
  right: 0;
  left: 0;
  z-index: 1030;
}
.navbar-fixed-bottom .navbar-inner {
  padding-left: 0;
  padding-right: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
}


  </style>
{% endblock %}
{% block javascripts %}
<script src={{ asset("src/ace.js") }} type="text/javascript" charset="utf-8"></script>
<script src={{ asset("src/theme-textmate.js") }} type="text/javascript" charset="utf-8"></script>
<script src={{ asset("src/mode-c_cpp.js") }} type="text/javascript" charset="utf-8"></script>
<script type="text/javascript">
function getExample(filename){
	// alert('editting file');
	$.get(filename, function(data)
	{
		// $('.result').html(data);
		editor.getSession().setValue(data);
		// alert('Load was performed.');
	});
}
</script>
<script type="text/javascript">


function throwMud()
{
	dirty=true;
	$("#compile_text").html(" Save & Build");
	$("#revert").removeClass("disabled").off('click').click(function()
	{
	    revert();
	});
	$("#save").removeClass("disabled").off('click').click(function()
	{
		save();
	})
	disableLink($(".download_link"));
}
function cleanUp()
{
	dirty= false;
	$("#compile_text").html(" Build");
	enableLink($(".link_ino"));
	disableLink($(".link_hex"));
	$("#revert").addClass("disabled").off('click');
	$("#save").addClass("disabled").off('click');
}

function motherInLaw()
{
	if(dirty)
	{
		save_and_build();
	}
	else
	{
		build();
	}	
}

function setProgress(newprogress)
{
	$("#progress").show('fast');
	$("#progress_val").width(newprogress+'%');
	$("#operation_output").hide('fast');
}

function clearProgress(output)
{
	$("#progress").hide('fast');
	$("#progress_val").width('0%');	
	$("#operation_output").html(output).show('fast');
}

function save()
{
	setProgress(90);
	$.post("{{ path('AceEditorBundle_save') }}", {data: editor.getSession().getValue(), project_name:"{{project_name}}"}, function(data)
	{
		$("#save").addClass("btn-success");
		$("#save_icon").addClass("icon-white");
		clearProgress("Saved successfuly.");
		cleanUp();
		window.setTimeout(function () {
		    $("#save").removeClass("btn-success");
			$("#save_icon").removeClass("icon-white");
		}, 500);
		// alert("Data received: " + data);
	});	
}

function revert()
{
	setProgress(90);
	$.get("{{ path('AceEditorBundle_getdata',{'project_name':project_name}) }}", function(data)
	{
		editor.getSession().setValue(data);
		$("#revert").addClass("btn-success");
		$("#revert_icon").addClass("icon-white");
		clearProgress("Reverted successfuly.");
		cleanUp();
		window.setTimeout(function () {
		    $("#revert").removeClass("btn-success");
			$("#revert_icon").removeClass("icon-white");
		}, 500);
		// alert("Data received: " + data);
	});	
}

function build()
{
	setProgress(90);
	$.post("{{ path('AceEditorBundle_compile') }}", { project_name:"{{project_name}}"}, function(data)
	{
		var obj = jQuery.parseJSON(data);
		if(obj.success == 0)
		{
			$("#compile_output").css('color', 'red');
			for (var i=0; i<obj.lines.length; i++)
			{
				$(".ace_gutter-cell").filter(function(index) {
				  return $(this).html() == obj.lines[i];
				}).css("text-decoration","underline").css("color","red");
			}
			 
			$("#editor").css("bottom","150px");
			$("#compile_output").css("bottom","0px");
			$("#compile_output").css("height","120px");
			$("#compile_output").addClass("well");
			$("#compile").addClass("btn-warning");
			$("#compile_icon").addClass("icon-remove");
			
			
			$("#compile_output").html(obj.text);
			clearProgress("Compilation failed.")
		}
		else
		{
			$("#compile_output").css('color', '');
			$(".ace_gutter-cell").css("text-decoration", "").css("color","");
			$("#editor").css("bottom","");
			$("#compile_output").css("bottom","");
			$("#compile_output").css("height","");
			$("#compile_output").removeClass("well");
			$("#compile").addClass("btn-success");
			$("#compile_icon").addClass("icon-ok");

			clearProgress(obj.text)
			$("#compile_output").html("");
			enableLink($(".link_hex"));
		}
		$("#compile_icon").removeClass("icon-check").addClass("icon-white");

		window.setTimeout(function () {
		    $("#compile").removeClass("btn-success").removeClass("btn-warning");
				$("#compile_icon").removeClass("icon-white").removeClass("icon-remove").removeClass("icon-ok").addClass("icon-check");
		}, 500);
		// alert("Data received: " + data);
	});	
}

function save_and_build()
{
	save();
	$(document).ajaxStop(function()
	{
		build();
		$(this).unbind('ajaxStop');
	});
}

function disableLink(link)
{
	link.css("text-decoration","line-through").click(function(e)
	{
	    e.preventDefault();
	});
}
function enableLink(link)
{
	link.css("text-decoration","").off('click');
}
</script>

<script type="text/javascript">
    function scan(){
    $('#scanning').show('slow');
   	$('#noscanning').hide('slow');
    getFire();
    }
    function connect(){
    //alert('called connect ');
    var applet = document.getElementById('myapplet');
    var portslist= document.getElementById('ports');
    var rateslist= document.getElementById('baudrates');
    var port= portslist.options[portslist.selectedIndex].value;
    var rate= rateslist.options[rateslist.selectedIndex].value;
    //alert("overrideConnect('"+portslist.selectedIndex+"','"+rateslist.selectedIndex+"')");

    applet.overrideConnect(portslist.selectedIndex,rateslist.selectedIndex);
    }
    function getFire(){
    var applet = document.getElementById('myapplet');
    var portslist= document.getElementById('ports');
    var rateslist= document.getElementById('baudrates');
    portsAvail=applet.getFire2().split(",");
    for (var i =0 ;i< portsAvail.length ; i++){
    portslist.options[i]=new Option(portsAvail[i],portsAvail[i],true,true);
    }
    ratesAvail=applet.getFireRates().split(",");
    for (var i =0 ;i< ratesAvail.length ; i++){
    //rateslist.options[i]=new Option(ratesAvail[i],ratesAvail[i],true,true);
    }
    }
</script>
{% endblock %}
{% block body %}
<!-- <div class="navbar navbar-fixed-bottom">
	<div class="navbar-inner">
	    <div class="container-fluid">
		<ul class="nav">		
          <li id="homepage"><a href="{{ path('AceEditorBundle_homepage')}}">Home</a></li>
        </ul>
		</div>
	</div>
</div> -->

<div class="container">
<div id="container" class="row-fluid">	
	<div class="row-fluid">
	<div id="container_left" class="span2">
		<button id = "revert" class="btn mybutton disabled"><i id="revert_icon" class="icon-arrow-left"></i> Revert</span></button>
	    <button id = "save" class="btn mybutton disabled" /><i id="save_icon" class="icon-download"></i> Save Changes</button>
		<button id = "compile" class="btn mybutton"><i id="compile_icon" class="icon-check"></i><span id="compile_text"> Build</span></button>
		    <div id="noscanning">
		        <button onclick='scan()' class="btn mybutton">Search for Arduino...</button>
		    </div>
		    <div id="scanning">
		        <button onclick='connect()' class="btn mybutton">Connect</button>
				<select id="ports" class="span12">
					<option>dev</option>
					<option>tty</option>
					<option>36800</option>
					<option>57600</option>
					<option>115200</option>
				</select><button id = "reload" class="btn mybutton" onclick="getFire()"><i id="reload_icon" class="icon-repeat"></i></button>
				<select id="baudrates" class="span12">
		            <option>110</option>
		            <option>300</option>
		            <option>600</option>
		            <option>1200</option>
		            <option>4800</option>
		            <option selected="true">9600</option>
		            <option>14400</option>
		            <option>19200</option>
		            <option>38400</option>
		            <option>115200</option>
		            <option>128000</option>
		            <option>256000</option>
				</select>
	    </div>
		<div id="saves" class="well">
			<i class="icon-file"></i>Download:<br />
			<a href="{{ path('AceEditorBundle_download', { 'project_name': project_name }) }}" class="download_link link_ino">Download .ino</a>
			<a href="{{ path('AceEditorBundle_download', { 'project_name': project_name, 'type' : "hex"}) }}" class="download_link link_hex">Download .hex</a>
		</div>
		<div>
			Total Number of lines: <span id="line_count">0</span>
		</div>
		<div id="progress" class="progress progress-striped active">
		    <div id="progress_val" class="bar" style="width: 40%;"></div>
		    </div>
		<div id="operation_output">
		</div>
		<applet width="1" height="1"  id="myapplet" style="visibility:hidden;"
		        code="eu.amaxilatis.ardoserial.MyApplet.class"
		        archive="http://students.ceid.upatras.gr/~amaxilatis/ardoserial/ardoSerial-0.1-jar-with-dependencies.jar">
		</applet>
	</div>
	<div id="container_right" class="span10">
		<div class="row-fluid">
		<pre id="editor" class="span9">{% render "AceEditorBundle:Default:getData" with {'project_name': project_name} %}</pre>
		</div>
		<div class="row-fluid">
		<div id="compile_output" class="span9 well"></div>
		</div>
	</div>	
</div>
</div>
</div>


<script>
var editor = ace.edit("editor");
var dirty = false;
	
window.onload = function()
{
    editor.setTheme("ace/theme/textmate");

    var JavaScriptMode = require("ace/mode/c_cpp").Mode;
    editor.getSession().setMode(new JavaScriptMode());

	editor.getSession().setUseSoftTabs(false);
	editor.getSession().on('change', function()
	{
		throwMud();
		$("#line_count").html(editor.getSession().getValue().split("\n").length);
	});
	
	editor.commands.addCommand({
	    name: 'saveFile',
	    bindKey: {
	        win: 'Ctrl-S',
	        mac: 'Command-S',
	        sender: 'editor|cli'
	    },
	    exec: function(env, args, request) {
	        save();
	    }
	});
		
	editor.commands.addCommand({
	    name: 'buildFile',
	    bindKey: {
	        win: 'Ctrl-R',
	        mac: 'Command-R',
	        sender: 'editor|cli'
	    },
	    exec: function(env, args, request) {
	        motherInLaw();
	    }
	});
	
	editor.commands.addCommand({
	    name: 'uploadFile',
	    bindKey: {
	        win: 'Ctrl-U',
	        mac: 'Command-U',
	        sender: 'editor|cli'
	    },
	    exec: function(env, args, request) {
	        alert("Y U NO Upload?");
	    }
	});
	
	editor.commands.addCommand({
	    name: 'CheckWord',
	    bindKey: {
	        win: 'Ctrl-Space',
	        mac: 'Ctrl-Space',
	        sender: 'editor|cli'
	    },
	    exec: function(env, args, request) {
			var selection = editor.getSession().doc.getTextRange(editor.getSelectionRange());
			if (selection == "")
			{
				var row = editor.getSession().getSelection().getCursor().row;
				var column = editor.getSession().getSelection().getCursor().column
				var string = editor.getSession().getLine(editor.getSession().getSelection().getCursor().row);
				var first_half = string.substring(0,column).match(/\w+$/);
				var second_half = string.substring(column, string.length).match(/^\w+/);
				if (first_half == null) first_half = "";
				if (second_half == null) second_half = "";
				selection = first_half + second_half;
			}
			window.open('http://www.google.com/search?q='+selection+'+inurl:arduino.cc/en/Reference&btnI');
	    }
	});
	
	editor.commands.addCommand({
	    name: 'MyComments',
	    bindKey: {
	        win: 'Ctrl-/',
	        mac: 'Command-/',
	        sender: 'editor|cli'
	    },
	    exec: function(env, args, request)
		{
			editor.toggleCommentLines();
	    }
	});
	
};


$(document).ready(function()
{	
	$("#line_count").html(editor.getSession().getValue().split("\n").length);
	disableLink($(".link_hex"));
	$("#scanning").hide();
	$("#progress").hide();
	$("#save").click(function()
	{
		save();
	});
	$("#revert").click(function()
	{
		revert();
	});
	
	$("#compile").click(function() 
	{
		motherInLaw();
	});
	
});
</script>
	

{% endblock %}

{% block examples%}
<ul class="nav">
  <li class="dropdown">
    <a href="javascript:void(0)" class="dropdown-toggle" data-toggle="dropdown">Examples<b class="caret"></b></a>
    <ul class="dropdown-menu">
			{% for section in examples %}
		    <li class="dropdown">
			<a href="javascript:void(0)">{{section[0]}}</a>
			<ul class="dropdown-menu">
	    	{% for file in section[1] %}
	    	    <li onclick="getExample('{{ path('AceEditorBundle_fetchexample', {'category':section[0], 'name':file})}}')"><a href="javascript:void(0)">{{file}}</a></li>
	    	{% endfor %}
			</ul>
			</li>
			{% endfor %}
	
    </ul>
  </li>
</ul>

{% endblock %}
